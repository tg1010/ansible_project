---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    
    
    vars:
   # Variables that will be used in the launch of the EC2 instances. Can also set number to launch
      instance_type: t2.micro
      security_group: ansible-web-2
   # This is just the basic amazon linux image, if changed the user to ssh in will need to be changed
      image: ami-4836a428 
      keypair: MyKeyPair  
      region: us-west-2
      count: 4 

    # Tasks that will be used to create security group, launch an instance, add it to the inventory
    # then wait for ssh available and give it a name in the aws console.
    tasks:

       # Creates a security group this can be condensed in version 2.4 of ansible by using 'ports'
       # to do multiple at a time, instead of 'from_port' , 'to_port'
      - name: Create a security group
        local_action: 
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 8080
              to_port: 8080
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 8082
              to_port: 8082
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 8083
              to_port: 8083
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 9000
              to_port: 9000
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall
      
       # Launches the EC2 instances using variables set before 
      - name: Launch the new EC2 Instance
        local_action: ec2 
                      group={{ security_group }} 
                      instance_type={{ instance_type}} 
                      image={{ image }} 
                      wait=true
                      region={{ region }}
                      keypair={{ keypair }}
                      count={{count}}
        register: ec2_info
      
       # Adds the instance to inventory hosts file 
      - name: Add the newly created EC2 instance
        become: True
        become_method: sudo
        local_action: lineinfile 
                      dest="/etc/ansible/hosts" 
                      regexp={{ item.instance_info.public_ip }} 
                      insertafter={{ item.aws_name }} line={{ item.instance_info.public_ip }}
        with_items: 
          - { instance_info: "{{ ec2_info.instances[0] }}", aws_name: '\[jenkins_ec2\]\s+' }
          - { instance_info: "{{ ec2_info.instances[1] }}", aws_name: '\[tomcat_ec2\]\s+' }
          - { instance_info: "{{ ec2_info.instances[2] }}", aws_name: '\[sonarqube_ec2\]\s+' }
          - { instance_info: "{{ ec2_info.instances[3] }}", aws_name: '\[nexus_ec2\]\s+' }
      
       # Need to wait for ssh to be available for next play
      - name: Wait for SSH to come up
        local_action: wait_for 
                      host={{ item.public_ip }} 
                      port=22 
                      state=started
        with_items: "{{ ec2_info.instances }}"


       # Names each instance individually, if changing the count the with items will need to be
       # adjusted as well  
      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.instance_info.id }} region={{ region }} state=present
        with_items:
          - { instance_info: "{{ ec2_info.instances[0] }}", aws_name: 'jenkins_ec2' }
          - { instance_info: "{{ ec2_info.instances[1] }}", aws_name: 'tomcat_ec2' }
          - { instance_info: "{{ ec2_info.instances[2] }}", aws_name: 'sonarqube_ec2' }
          - { instance_info: "{{ ec2_info.instances[3] }}", aws_name: 'nexus_ec2' }
        args:
          tags:
            Name: "{{ item.aws_name }}" 
        
       # When the inventory is first loaded for the playbook the EC2 hosts that we just added
       # aren't in it so the inventory needs to be refreshed 
      - meta: refresh_inventory


   # This play installs docker, pip and docker-py, it also starts docker and changes it's permissions
   # 'pipeline' is the top level hostname for the ec2 instances they are all children of it
   # so they are included
  - name: install docker
    gather_facts: False
    hosts: pipeline
    become: True
   # This is the username that you ssh with for amazon linux it's ec2-user.
   # It'll be different depending on the distribution which you pick with the image ami number
    remote_user: ec2-user
    become_method: sudo
    tasks:

      - name: Install docker
        yum:
          name: "{{ item }}"
          update_cache: yes
        with_items:
          - python-setuptools
          - docker    

      - name: Start docker
        service:
          name: docker
          state: started
     
      - name: Give docker permissions to run without sudo
        shell: usermod -aG docker ec2-user

      - name: Install pip
        easy_install: name=pip

      - name: Install docker-py to latest
        pip:
          name: "{{ item }}"
          state: latest
        with_items:
          - docker-py
